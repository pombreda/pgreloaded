<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE module SYSTEM "api.dtd">

<module name="pygame2.sdlgfx.rotozoom">
  <short>SDL_gfx rotozoom wrapper module</short>
  <desc>SDL_gfx rotozoom wrapper module</desc>

  <func name="rotate_90">
    <call>rotate_90 (surface, times) -> Surface
    </call>
    <desc>Rotates a surface clockwise by 90 degrees.
      
      Rotates the passed *surface* clockwise by 90 degrees and returns a new
      :class:`pygame2.sdl.video.Surface` with the rotated result.
      *times* denotes the amount of rotations to perform.
    </desc>
  </func>
  <func name="rotozoom">
    <call>rotozoom (surface, angle, zoom[, smooth]) -> Surface</call>
    <desc>Rotates and zooms a surface.
    
      Rotates and zooms a *surface* at the same time and returns a new
      :class:`pygame2.sdl.video.Surface` with the result. *angle* is the
      rotation angle in degrees, *zoom* the zoom factor. The optional
      *smooth* argument is used for smoothing the edges and pixels of
      the returned surface.
    </desc>
  </func>
  <func name="rotozoom_size">
    <call>rotozoom_size (width, height, angle, zoom) -> int, int
    rotozoom_size (size, angle, zoom) -> int, int
    rotozoom_size (surface, angle, zoom) -> int, int
    </call>
    <desc>Calculates the resulting surface size for a rotozoom operation.
      
      Calculates the size of the resulting surface, if a rotozoom operation
      takes place on a specific :class:`pygame2.sdl.video.Surface`.
    </desc>
  </func>
  <func name="rotozoom_size_xy">
    <call>rotozoom_size_xy (width, height, angle, zoomx, zoomy) -> int, int
    rotozoom_size_xy (size, angle, zoomx, zoomy) -> int, int
    rotozoom_size_xy (surface, angle, zoomx, zoomy) -> int, int
    </call>
    <desc>Calculates the resulting surface size for a rotozoom operation.
      
      Calculates the size of the resulting surface, if a rotozoom operation
      takes place on a specific :class:`pygame2.sdl.video.Surface`.
    </desc>
  </func>
  <func name="rotozoom_xy">
    <call>rotozoom_xy (surface, angle, zoomx, zoomy[, smooth]) -> Surface</call>
    <desc>Rotates and zooms a surface with different scaling factors for the x- and y- axes.
    
      Rotates and zooms a *surface* at the same time and returns a new
      :class:`pygame2.sdl.video.Surface` with the result. *angle* is the
      rotation angle in degrees, *zoomx* and *zoomy* the zoom factors
      for the x- and y-axis. The optional *smooth* argument is used for
      smoothing the edges and pixels of the returned surface.
    </desc>
  </func>
  <func name="shrink">
    <call>zoom (surface, shrinkx, shrinky) -> Surface
    </call>
    <desc>Shrinks a surface.
      
      Shrinks a *surface* and returns a new
      :class:`pygame2.sdl.video.Surface` with the result. *shrinkx* and
      *shrinky* are the shrink factors for the x- and y-axis.
    </desc>
  </func>
  <func name="zoom">
    <call>zoom (surface, zoomx, zoomy[, smooth]) -> Surface</call>
    <desc>Zooms a surface.
    
      Zooms a *surface* and returns a new
      :class:`pygame2.sdl.video.Surface` with the result. *zoomx* and
      *zoomy* are the zoom factors for the x- and y-axis. The optional
      *smooth* argument is used for smoothing the edges and pixels of
      the returned surface.
    </desc>
  </func>
  <func name="zoom_size">
    <call>zoom_size (width, height, angle, zoom) -> int, int
          zoom_size (surface, angle, zoom) -> int, int
    </call>
    <desc>Calculates the resulting surface size for a zoom operation.
      
      Calculates the size of the resulting surface, if a zoom operation
      takes place on a specific :class:`pygame2.sdl.video.Surface`.
    </desc>
  </func>
</module>

